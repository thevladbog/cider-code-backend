generator client {
  provider = "prisma-client-js"
}

generator zod-prisma-types {
  provider = "zod-prisma-types"
  output   = "./generated/zod" // default is ./generated/zod
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  /// The unique identifier for the product
  /// @default {Generated by database}
  /// @zod.string({ description: "The unique identifier for the product"})
  id               String        @id @unique() @default(nanoid())
  shortName        String        @map("short_name")
  fullName         String        @map("full_name")
  gtin             String        @db.VarChar(14)
  alcoholCode      String        @map("alcohol_code") @db.VarChar(19)
  expirationInDays Int           @map("expiration_in_days")
  volume           Decimal
  pictureUrl       String?       @db.VarChar(1024)
  status           ProductStatus @default(INACTIVE)

  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")

  IndividualCodes IndividualCode[]
  BoxesCode       BoxesCode[]
  Shift           Shift[]

  @@unique([gtin, alcoholCode])
  @@index([gtin])
}

model IndividualCode {
  id        Int                  @id @default(autoincrement())
  code      String               @unique @db.VarChar(32)
  product   Product              @relation(fields: [productId], references: [id])
  productId String
  status    IndividualCodeStatus @default(NEW)

  created     DateTime   @default(now()) @map("created_at")
  modified    DateTime?  @updatedAt @map("updated_at")
  BoxesCode   BoxesCode? @relation(fields: [boxesCodeId], references: [id])
  boxesCodeId Int?
  shift       Shift?     @relation(fields: [shiftId], references: [id])
  shiftId     String?

  @@index([code])
}

model BoxesCode {
  id              Int              @id @default(autoincrement())
  gln             String
  counter         Int              @default(autoincrement())
  sscc            String           @unique @db.VarChar(22)
  product         Product          @relation(fields: [productId], references: [id])
  productId       String
  individualCodes IndividualCode[]
  shift           Shift?           @relation(fields: [shiftId], references: [id])

  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")
  shiftId  String?

  @@index([sscc])
}

model Shift {
  id             String           @id @unique() @default(nanoid())
  plannedDate    DateTime         @default(now()) @map("planned_day")
  product        Product          @relation(fields: [productId], references: [id])
  productId      String
  plannedCount   Int?             @map("planned_count")
  factCount      Int?             @map("fact_count")
  packing        Boolean          @default(false)
  countInBox     Int?
  status         ShiftStatus      @default(PLANNED)
  BoxesCode      BoxesCode[]
  IndividualCode IndividualCode[]
  operator       Operator?        @relation(fields: [operatorId], references: [id])
  operatorId     String?

  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")
}

model Operator {
  id      String  @id @unique() @default(nanoid())
  name    String
  barcode String?
  Shift   Shift[]

  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")
}

model User {
  id        String  @id @unique() @default(nanoid())
  email     String  @unique @db.VarChar(80)
  firstName String  @map("first_name") @db.VarChar(80)
  lastName  String  @map("last_name") @db.VarChar(80)
  password  String
  picture   String?
  role      ROLE    @default(GUEST)

  created     DateTime      @default(now()) @map("created_at")
  modified    DateTime?     @updatedAt @map("updated_at")
  EmailTokens EmailTokens[]
}

model RevokedToken {
  id  String @id @default(nanoid()) @map("_id")
  jti String @unique
}

model EmailTokens {
  id     String @id @default(nanoid()) @map("_id")
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique()
  token  String @unique()

  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")

  @@map("email_tokens")
}

model OrdersToDelivery {
  id           String                 @id @default(nanoid()) @map("_id")
  orderNumber  String
  deliveryDate DateTime
  status       OrdersToDeliveryStatus @default(NEW)
  consignee    String
  address      String

  created  DateTime? @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")

  @@unique([orderNumber, consignee])
  @@map("orders_to_delivery")
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  PAUSED
  REGISTRATION
  ARCHIVED
}

enum IndividualCodeStatus {
  NEW
  USED
}

enum ShiftStatus {
  PLANNED
  INPROGRESS
  PAUSED
  DONE
  CANCELED
}

enum ROLE {
  ADMIN
  SUPERVISOR
  USER
  GUEST
}

enum OrdersToDeliveryStatus {
  NEW
  ARCHIVE
}
