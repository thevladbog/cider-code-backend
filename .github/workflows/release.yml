name: Release & Deploy

on:
  push:
    branches:
      - 'release'
      - 'release-stable'
      - 'release-beta'

env:
  REGISTRY: cr.yandex/${{ secrets.YCR_REGISTRY_ID }}/bottlecode-backend

jobs:
  prepare-release-info:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      is_beta: ${{ steps.set_is_beta.outputs.BETA }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Semantic Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      # Получить последнюю версию (semver, без v)
      - name: Get release version
        id: get_version
        run: |
          git fetch --tags
          TAG=$(git describe --tags --abbrev=0)
          if [[ $TAG == v* ]]; then
            VERSION=${TAG#v}
          else
            VERSION=$TAG
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      # Определяем, это бета-релиз или стабильный
      - name: Is Beta?
        id: set_is_beta
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/release-beta" ]] || [[ "${{ steps.get_version.outputs.VERSION }}" == *beta* ]]; then
            echo "BETA=true" >> $GITHUB_OUTPUT
          else
            echo "BETA=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: prepare-release-info
    steps:
      - uses: actions/checkout@v4

      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

      - name: Auth YC CLI
        env:
          YC_OAUTH_TOKEN: ${{ secrets.YC_OAUTH_TOKEN }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          yc config set token "$YC_OAUTH_TOKEN"
          yc config set cloud-id "$YC_CLOUD_ID"
          yc config set folder-id "$YC_FOLDER_ID"

      - name: Docker login YCR
        run: echo "${{ secrets.YC_OAUTH_TOKEN }}" | docker login --username oauth --password-stdin cr.yandex

      - name: Build & push STABLE
        if: ${{ needs.prepare-release-info.outputs.is_beta == 'false' }}
        run: |
          TAG=${{ needs.prepare-release-info.outputs.version }}
          docker build \
            --build-arg SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }} \ 
            --build-arg SENTRY_DSN=${{ secrets.SENTRY_DSN }} \
            -t $REGISTRY:$TAG .
          docker tag $REGISTRY:$TAG $REGISTRY:latest
          docker push $REGISTRY:$TAG
          docker push $REGISTRY:latest

      - name: Build & push BETA
        if: ${{ needs.prepare-release-info.outputs.is_beta == 'true' }}
        run: |
          TAG=${{ needs.prepare-release-info.outputs.version }}
          NODE_ENV=stage
          docker build --build-arg SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }} --build-arg SENTRY_DSN=${{ secrets.SENTRY_DSN }} -t $REGISTRY:$TAG .
          docker tag $REGISTRY:$TAG $REGISTRY:beta
          docker push $REGISTRY:$TAG
          docker push $REGISTRY:beta

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push, prepare-release-info]
    steps:
      - uses: actions/checkout@v4

      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

      - name: Auth YC CLI
        env:
          YC_OAUTH_TOKEN: ${{ secrets.YC_OAUTH_TOKEN }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          yc config set token "$YC_OAUTH_TOKEN"
          yc config set cloud-id "$YC_CLOUD_ID"
          yc config set folder-id "$YC_FOLDER_ID"

      - name: Get VM IP
        id: getip
        run: |
          export VM_ID=${{ secrets.VM_ID }}
          IP=$(yc compute instance get --id "$VM_ID" --format json | jq -r '.network_interfaces[0].primary_v4_address.one_to_one_nat.address')
          echo "VM_IP=$IP" >> $GITHUB_ENV
          echo "VM_IP=$IP" >> $GITHUB_OUTPUT
      # Передать .env.stable
      - name: Copy .env.stable
        if: ${{ needs.prepare-release-info.outputs.is_beta == 'false' }}
        run: |
          echo '${{ secrets.PROD_ENV_FILE }}' > envfile
          cat envfile | yc compute ssh --id "$VM_ID" -- "cat > /opt/bottlecode-backend/.env.beta"

      # Передать .env.beta
      - name: Copy .env.beta
        if: ${{ needs.prepare-release-info.outputs.is_beta == 'true' }}
        run: |
          echo '${{ secrets.BETA_ENV_FILE }}' > envfile
          yc config list
          cat envfile | yc compute ssh --id "$VM_ID" -- "cat > /opt/bottlecode-backend/.env.beta"

      # Перезапустить только нужный сервис
      - name: Restart app-stable (stable release)
        if: ${{ needs.prepare-release-info.outputs.is_beta == 'false' }}
        run: |
          yc compute ssh --id "$VM_ID" -- "
            cd /opt/bottlecode-backend &&
            docker compose pull app-stable &&
            docker compose up -d app-stable &&
            docker compose run --rm app-stable npx prisma migrate deploy
          "

      - name: Restart app-beta (beta release)
        if: ${{ needs.prepare-release-info.outputs.is_beta == 'true' }}
        run: |
          yc compute ssh --id "$VM_ID" -- "
            cd /opt/bottlecode-backend &&
            docker compose pull app-beta &&
            docker compose up -d app-beta &&
            docker compose run --rm app-beta npx prisma migrate deploy
          "
